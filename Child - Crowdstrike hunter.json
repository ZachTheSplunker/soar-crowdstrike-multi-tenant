{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Proof of Value",
    "coa": {
        "data": {
            "description": "Child playbook for hunting in Crowdstrike.",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_4_to_port_12",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "id": "port_11_to_port_13",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "id": "port_13_to_port_15",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "id": "port_0_to_port_16",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_16_to_port_15",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "id": "port_15_to_port_17",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "id": "port_17_to_port_1",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_2_to_port_18",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_18_to_port_11",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "id": "port_12_to_port_15",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_2_to_port_4",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_2_to_port_19",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                },
                {
                    "id": "port_19_to_port_20",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_20_to_port_21",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "21",
                    "targetPort": "21_in"
                },
                {
                    "id": "port_21_to_port_1",
                    "sourceNode": "21",
                    "sourcePort": "21_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_20_to_port_22",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "22",
                    "targetPort": "22_in"
                },
                {
                    "id": "port_22_to_port_1",
                    "sourceNode": "22",
                    "sourcePort": "22_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "8f1e2023547e265fd028e733ea5aea5eeae0321c",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 360,
                    "y": 0
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 810,
                    "y": 1194
                },
                "11": {
                    "customCode": "@phantom.playbook_block()\ndef list_processes_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug(\"list_processes_1() called\")\n\n    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n\n    filtered_input_0_sensor_id = phantom.collect2(container=container, datapath=[\"filtered-data:sensor_filter:condition_1:playbook_input:sensor_id\"])\n    filtered_input_1_file_hash = phantom.collect2(container=container, datapath=[\"filtered-data:filter_1:condition_1:playbook_input:file_hash\"])\n\n    parameters = []\n\n    # build parameters list for 'list_processes_1' call\n    for filtered_input_0_sensor_id_item in filtered_input_0_sensor_id:\n        for filtered_input_1_file_hash_item in filtered_input_1_file_hash:\n            if filtered_input_0_sensor_id_item[0] is not None and filtered_input_1_file_hash_item[0] is not None:\n                parameters.append({\n                    \"id\": filtered_input_0_sensor_id_item[0],\n                    \"ioc\": filtered_input_1_file_hash_item[0],\n                    \"limit\": 100,\n                })\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    phantom.debug('########## CUSTOM CODE #############')\n    asset_name = phantom.collect2(container=container, datapath=[\"filtered-data:filter_1:condition_1:playbook_input:tenant_name\"])\n    phantom.debug('asset_name: {}'.format(asset_name[0]))\n    phantom.debug('########## END CUSTOM CODE #############')\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.act(\"list processes\", parameters=parameters, name=\"list_processes_1\", assets=asset_name[0], callback=get_process_detail_1)\n\n    return",
                    "data": {
                        "action": "list processes",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "CrowdStrike OAuth API",
                        "connectorConfigs": [
                            "crowdstrike"
                        ],
                        "connectorId": "ae971ba5-3117-444a-8ac5-6ce779f3a232",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "list_processes_1",
                        "id": "11",
                        "parameters": {
                            "id": "filtered-data:sensor_filter:condition_1:playbook_input:sensor_id",
                            "ioc": "filtered-data:filter_1:condition_1:playbook_input:file_hash",
                            "limit": 100
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "id"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "ioc"
                            },
                            {
                                "data_type": "numeric",
                                "default": 100,
                                "field": "limit"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "11",
                    "type": "action",
                    "userCode": "\n    phantom.debug('########## CUSTOM CODE #############')\n    asset_name = phantom.collect2(container=container, datapath=[\"filtered-data:filter_1:condition_1:playbook_input:tenant_name\"])\n    phantom.debug('asset_name: {}'.format(asset_name))\n    phantom.debug('########## END CUSTOM CODE #############')\n\n",
                    "x": 0,
                    "y": 508
                },
                "12": {
                    "customCode": "@phantom.playbook_block()\ndef get_system_info_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug(\"get_system_info_1() called\")\n\n    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n\n    hunt_file_1_result_data = phantom.collect2(container=container, datapath=[\"hunt_file_1:action_result.data.*.device_id\",\"hunt_file_1:action_result.parameter.context.artifact_id\"], action_results=results)\n\n    parameters = []\n\n    # build parameters list for 'get_system_info_1' call\n    for hunt_file_1_result_item in hunt_file_1_result_data:\n        if hunt_file_1_result_item[0] is not None:\n            parameters.append({\n                \"id\": hunt_file_1_result_item[0],\n                \"context\": {'artifact_id': hunt_file_1_result_item[1]},\n            })\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    phantom.debug('########## CUSTOM CODE #############')\n    asset_name = phantom.collect2(container=container, datapath=[\"filtered-data:filter_1:condition_1:playbook_input:tenant_name\"])\n    phantom.debug('asset_name: {}'.format(asset_name[0]))\n    phantom.debug('########## END CUSTOM CODE #############')\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.act(\"get system info\", parameters=parameters, name=\"get_system_info_1\", assets=asset_name[0], callback=join_format_1)\n\n    return",
                    "data": {
                        "action": "get system info",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "CrowdStrike OAuth API",
                        "connectorConfigs": [
                            "crowdstrike"
                        ],
                        "connectorId": "ae971ba5-3117-444a-8ac5-6ce779f3a232",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_system_info_1",
                        "id": "12",
                        "parameters": {
                            "id": "hunt_file_1:action_result.data.*.device_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "12",
                    "type": "action",
                    "userCode": "\n    phantom.debug('########## CUSTOM CODE #############')\n    asset_name = phantom.collect2(container=container, datapath=[\"filtered-data:filter_1:condition_1:playbook_input:tenant_name\"])\n    phantom.debug('asset_name: {}'.format(asset_name))\n    phantom.debug('########## END CUSTOM CODE #############')\n\n",
                    "x": 340,
                    "y": 687
                },
                "13": {
                    "customCode": "@phantom.playbook_block()\ndef get_process_detail_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug(\"get_process_detail_1() called\")\n\n    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n\n    list_processes_1_result_data = phantom.collect2(container=container, datapath=[\"list_processes_1:action_result.data.*.falcon_process_id\",\"list_processes_1:action_result.parameter.context.artifact_id\"], action_results=results)\n\n    parameters = []\n\n    # build parameters list for 'get_process_detail_1' call\n    for list_processes_1_result_item in list_processes_1_result_data:\n        if list_processes_1_result_item[0] is not None:\n            parameters.append({\n                \"falcon_process_id\": list_processes_1_result_item[0],\n                \"context\": {'artifact_id': list_processes_1_result_item[1]},\n            })\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    phantom.debug('########## CUSTOM CODE #############')\n    asset_name = phantom.collect2(container=container, datapath=[\"filtered-data:filter_1:condition_1:playbook_input:tenant_name\"])\n    phantom.debug('asset_name: {}'.format(asset_name[0]))\n    phantom.debug('########## END CUSTOM CODE #############')\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.act(\"get process detail\", parameters=parameters, name=\"get_process_detail_1\", assets=asset_name[0], callback=join_format_1)\n\n    return",
                    "data": {
                        "action": "get process detail",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "CrowdStrike OAuth API",
                        "connectorConfigs": [
                            "crowdstrike"
                        ],
                        "connectorId": "ae971ba5-3117-444a-8ac5-6ce779f3a232",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_process_detail_1",
                        "id": "13",
                        "parameters": {
                            "falcon_process_id": "list_processes_1:action_result.data.*.falcon_process_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "falcon_process_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "13",
                    "type": "action",
                    "userCode": "\n    phantom.debug('########## CUSTOM CODE #############')\n    asset_name = phantom.collect2(container=container, datapath=[\"filtered-data:filter_1:condition_1:playbook_input:tenant_name\"])\n    phantom.debug('asset_name: {}'.format(asset_name))\n    phantom.debug('########## END CUSTOM CODE #############')\n\n",
                    "x": 0,
                    "y": 687
                },
                "15": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "format_1",
                        "id": "15",
                        "parameters": [
                            "filtered-data:event_filter:condition_1:artifact:*.cef.sourceHostName",
                            "filtered-data:event_filter:condition_1:artifact:*.cef. cmdLine",
                            "filtered-data:event_filter:condition_1:artifact:*.cef.fileHashSha256",
                            "filtered-data:event_filter:condition_1:artifact:*.cef.filePath",
                            "filtered-data:event_filter:condition_1:artifact:*.cef.fileName",
                            "filtered-data:event_filter:condition_1:artifact:*.cef.falconHostLink",
                            "hunt_file_1:action_result.summary.device_count"
                        ],
                        "template": "CrowdStrike detected the following suspicious activity on an endpoint:\n\n| Field | Value |\n|---|---|\n| Host | {0} |\n| Command Line | {1} |\n| SHA 256 | {2} |\n| File Path | {3}\\\\{4}\n| CrowdStrike Detection Link | {5} |\n| Details of processes associated with the file hash | <see \"get process details\" action results> |\n| Count of machines that have the file on disk | {6} |\n| System information of machines that have the file on disk | <see \"get system info\" action results> |\n\n\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "15",
                    "type": "format",
                    "x": 340,
                    "y": 882
                },
                "16": {
                    "data": {
                        "advanced": {
                            "customName": "event_filter",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "artifact:*.label",
                                        "value": "event"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "Event Artifact",
                                "logic": "and"
                            }
                        ],
                        "functionId": 6,
                        "functionName": "event_filter",
                        "id": "16",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "filter",
                    "x": 680,
                    "y": 686
                },
                "17": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "pin_add_note_1",
                        "id": "17",
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "add_note": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "title",
                                        "name": "title",
                                        "placeholder": "Enter a note title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "content",
                                        "name": "content",
                                        "placeholder": "Enter the note content",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "markdown",
                                            "html"
                                        ],
                                        "default": "markdown",
                                        "description": "",
                                        "label": "note format",
                                        "name": "note_format",
                                        "placeholder": "Enter the note content",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "default": "general",
                                        "hidden": true,
                                        "name": "note_type",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "event_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "task_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add note",
                                "name": "add_note"
                            },
                            "pin": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "message",
                                        "name": "message",
                                        "placeholder": "Enter a message",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "data",
                                        "name": "data",
                                        "placeholder": "Enter a value",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "card",
                                            "data"
                                        ],
                                        "description": "",
                                        "label": "pin type",
                                        "name": "pin_type",
                                        "placeholder": "Select pin type",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "grey",
                                            "blue",
                                            "red"
                                        ],
                                        "description": "",
                                        "label": "pin color",
                                        "name": "pin_style",
                                        "placeholder": "Select pin color",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "Use a named pin",
                                        "renderType": "input",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "truncate",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "pin",
                                "name": "pin"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "add_note": {
                                "_internal": [
                                    "container",
                                    "note_type",
                                    "author",
                                    "event_id",
                                    "task_id",
                                    "trace"
                                ],
                                "content": "format_1:formatted_data",
                                "note_format": "markdown",
                                "note_type": "general",
                                "title": "Crowdstrike Hunt Results"
                            },
                            "pin": {
                                "_internal": [
                                    "container",
                                    "author",
                                    "truncate",
                                    "trace"
                                ],
                                "data": "Crowdstrike Hunt",
                                "message": "Completed hunting in Crowdstrike",
                                "name": null,
                                "pin_style": "grey",
                                "pin_type": "card"
                            }
                        }
                    },
                    "errors": {},
                    "id": "17",
                    "type": "utility",
                    "x": 340,
                    "y": 1046
                },
                "18": {
                    "data": {
                        "advanced": {
                            "customName": "sensor_filter",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "playbook_input:sensor_id",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "Sensor ID exists",
                                "logic": "and"
                            }
                        ],
                        "functionId": 7,
                        "functionName": "sensor_filter",
                        "id": "18",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "18",
                    "type": "filter",
                    "x": 60,
                    "y": 328
                },
                "19": {
                    "data": {
                        "action": "get indicator",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "CrowdStrike OAuth API",
                        "connectorConfigs": [
                            "crowdstrike"
                        ],
                        "connectorId": "ae971ba5-3117-444a-8ac5-6ce779f3a232",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_indicator_1",
                        "id": "19",
                        "parameters": {
                            "indicator_type": "sha256",
                            "indicator_value": "filtered-data:filter_1:condition_1:playbook_input:file_hash"
                        },
                        "requiredParameters": [],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "19",
                    "type": "action",
                    "x": 960,
                    "y": 702
                },
                "2": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "playbook_input:file_hash",
                                        "value": ""
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "playbook_input:tenant_name",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "File hash and tenant exist",
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "filter_1",
                        "id": "2",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "filter",
                    "x": 260,
                    "y": 148
                },
                "20": {
                    "data": {
                        "advanced": {
                            "case_sensitive": false,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "get_indicator_1:action_result.message",
                                        "value": "Indicator not found"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "20",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "20",
                    "type": "decision",
                    "x": 1040,
                    "y": 866
                },
                "21": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "add_comment_pin_2",
                        "id": "21",
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "comment": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "comment",
                                        "name": "comment",
                                        "placeholder": "Enter a comment",
                                        "renderType": "datapath",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add comment",
                                "name": "comment"
                            },
                            "pin": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "message",
                                        "name": "message",
                                        "placeholder": "Enter a message",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "data",
                                        "name": "data",
                                        "placeholder": "Enter a value",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "card",
                                            "data"
                                        ],
                                        "description": "",
                                        "label": "pin type",
                                        "name": "pin_type",
                                        "placeholder": "Select pin type",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "grey",
                                            "blue",
                                            "red"
                                        ],
                                        "description": "",
                                        "label": "pin color",
                                        "name": "pin_style",
                                        "placeholder": "Select pin color",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "Use a named pin",
                                        "renderType": "input",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "truncate",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "pin",
                                "name": "pin"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "comment": {
                                "_internal": [
                                    "container",
                                    "author",
                                    "trace"
                                ],
                                "comment": "Indicator not found"
                            },
                            "pin": {
                                "_internal": [
                                    "container",
                                    "author",
                                    "truncate",
                                    "trace"
                                ],
                                "data": "No indicator found",
                                "message": "Crowdstrike",
                                "name": null,
                                "pin_style": "grey",
                                "pin_type": "card"
                            }
                        }
                    },
                    "errors": {},
                    "id": "21",
                    "type": "utility",
                    "x": 790,
                    "y": 1046
                },
                "22": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "pin_3",
                        "id": "22",
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "pin": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "message",
                                        "name": "message",
                                        "placeholder": "Enter a message",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "data",
                                        "name": "data",
                                        "placeholder": "Enter a value",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "card",
                                            "data"
                                        ],
                                        "description": "",
                                        "label": "pin type",
                                        "name": "pin_type",
                                        "placeholder": "Select pin type",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "grey",
                                            "blue",
                                            "red"
                                        ],
                                        "description": "",
                                        "label": "pin color",
                                        "name": "pin_style",
                                        "placeholder": "Select pin color",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "Use a named pin",
                                        "renderType": "input",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "truncate",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "pin",
                                "name": "pin"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "pin": {
                                "_internal": [
                                    "container",
                                    "author",
                                    "truncate",
                                    "trace"
                                ],
                                "data": "Indicator found",
                                "message": "Crowdstrike",
                                "name": null,
                                "pin_style": "blue",
                                "pin_type": "card"
                            }
                        }
                    },
                    "errors": {},
                    "id": "22",
                    "type": "utility",
                    "x": 1130,
                    "y": 1046
                },
                "4": {
                    "customCode": "@phantom.playbook_block()\ndef hunt_file_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug(\"hunt_file_1() called\")\n\n    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n\n    filtered_input_0_file_hash = phantom.collect2(container=container, datapath=[\"filtered-data:filter_1:condition_1:playbook_input:file_hash\"])\n\n    parameters = []\n\n    # build parameters list for 'hunt_file_1' call\n    for filtered_input_0_file_hash_item in filtered_input_0_file_hash:\n        if filtered_input_0_file_hash_item[0] is not None:\n            parameters.append({\n                \"hash\": filtered_input_0_file_hash_item[0],\n                \"limit\": 100,\n            })\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    phantom.debug('########## CUSTOM CODE #############')\n    asset_name = phantom.collect2(container=container, datapath=[\"filtered-data:filter_1:condition_1:playbook_input:tenant_name\"])\n    phantom.debug('asset_name: {}'.format(asset_name[0]))\n    phantom.debug('########## END CUSTOM CODE #############')\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.act(\"hunt file\", parameters=parameters, name=\"hunt_file_1\", assets=asset_name[0], callback=get_system_info_1)\n\n    return",
                    "data": {
                        "action": "hunt file",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "CrowdStrike OAuth API",
                        "connectorConfigs": [
                            "crowdstrike"
                        ],
                        "connectorId": "ae971ba5-3117-444a-8ac5-6ce779f3a232",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "hunt_file_1",
                        "id": "4",
                        "parameters": {
                            "hash": "filtered-data:filter_1:condition_1:playbook_input:file_hash",
                            "limit": 100
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "hash"
                            },
                            {
                                "data_type": "numeric",
                                "default": 100,
                                "field": "limit"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "action",
                    "userCode": "\n    asset_name = phantom.collect2(container=container, datapath=[\"filtered-data:filter_1:condition_1:playbook_input:tenant_name\"])\n\n",
                    "x": 340,
                    "y": 508
                }
            },
            "notes": "Inputs: file_hash, sensor_id"
        },
        "input_spec": [
            {
                "contains": [
                    "hash",
                    "sha1",
                    "sha256"
                ],
                "description": "File Hash",
                "name": "file_hash"
            },
            {
                "contains": [],
                "description": "Falcon Sensor ID",
                "name": "sensor_id"
            },
            {
                "contains": [],
                "description": "Tenant name corresponds to the asset",
                "name": "tenant_name"
            }
        ],
        "output_spec": null,
        "playbook_type": "data",
        "python_version": "3",
        "schema": "5.0.8",
        "version": "5.3.3.92213"
    },
    "create_time": "2022-07-28T19:55:25.307944+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}