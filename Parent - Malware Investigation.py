"""
Parent playbook that launches child playbooks for malware investigation from Crowdstrike.
"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')

    # call 'artifact_filter' block
    artifact_filter(container=container)

    return

@phantom.playbook_block()
def decision_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_1() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["filtered-data:artifact_filter:condition_1:artifact:*.cef.fileHashSha256", "!=", ""]
        ])

    # call connected blocks if condition 1 matched
    if found_match_1:
        return

    # check for 'else' condition 2
    pin_add_comment_set_status_1(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def artifact_filter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("artifact_filter() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        conditions=[
            ["artifact:*.label", "==", "event"]
        ],
        name="artifact_filter:condition_1")

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        decision_1(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)
        playbook_child___indicator_reputation_1(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)
        playbook_child___crowdstrike_tenant_id_lookup_1(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def pin_add_comment_set_status_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("pin_add_comment_set_status_1() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.pin(container=container, data="No valid hash found", message="A valid sha256 has was not found", pin_style="red", pin_type="card")
    phantom.comment(container=container, comment="Ignoring alert because no SHA256 file hash was found.")
    phantom.set_status(container=container, status="closed")

    container = phantom.get_container(container.get('id', None))

    return


@phantom.playbook_block()
def playbook_child___indicator_reputation_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("playbook_child___indicator_reputation_1() called")

    container_artifact_data = phantom.collect2(container=container, datapath=["artifact:*.cef.fileHashSha256"])
    filtered_artifact_0_data_artifact_filter = phantom.collect2(container=container, datapath=["filtered-data:artifact_filter:condition_1:artifact:*.cef.fileHashSha256"])

    container_artifact_cef_item_0 = [item[0] for item in container_artifact_data]
    filtered_artifact_0__cef_filehashsha256 = [item[0] for item in filtered_artifact_0_data_artifact_filter]

    filehash_combined_value = phantom.concatenate(container_artifact_cef_item_0, dedup=True)
    file_hash_combined_value = phantom.concatenate(filtered_artifact_0__cef_filehashsha256, dedup=True)

    inputs = {
        "ip": [],
        "url": [],
        "domain": [""],
        "filehash": filehash_combined_value,
        "file_hash": file_hash_combined_value,
        "file_name": [""],
    }

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    # call playbook "local/Child - Indicator Reputation", returns the playbook_run_id
    playbook_run_id = phantom.playbook("local/Child - Indicator Reputation", container=container, inputs=inputs)

    return


@phantom.playbook_block()
def playbook_child___crowdstrike_hunter_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("playbook_child___crowdstrike_hunter_1() called")

    filtered_artifact_0_data_artifact_filter = phantom.collect2(container=container, datapath=["filtered-data:artifact_filter:condition_1:artifact:*.cef.fileHashSha256","filtered-data:artifact_filter:condition_1:artifact:*.cef.sensorId"])
    playbook_child___crowdstrike_tenant_id_lookup_1_output_tenant_name = phantom.collect2(container=container, datapath=["playbook_child___crowdstrike_tenant_id_lookup_1:playbook_output:tenant_name"])

    filtered_artifact_0__cef_filehashsha256 = [item[0] for item in filtered_artifact_0_data_artifact_filter]
    filtered_artifact_0__cef_sensorid = [item[1] for item in filtered_artifact_0_data_artifact_filter]
    playbook_child___crowdstrike_tenant_id_lookup_1_output_tenant_name_values = [item[0] for item in playbook_child___crowdstrike_tenant_id_lookup_1_output_tenant_name]

    file_hash_combined_value = phantom.concatenate(filtered_artifact_0__cef_filehashsha256, dedup=True)
    sensor_id_combined_value = phantom.concatenate(filtered_artifact_0__cef_sensorid, dedup=True)
    tenant_name_combined_value = phantom.concatenate(playbook_child___crowdstrike_tenant_id_lookup_1_output_tenant_name_values, dedup=True)

    inputs = {
        "file_hash": file_hash_combined_value,
        "sensor_id": sensor_id_combined_value,
        "tenant_name": tenant_name_combined_value,
    }

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    # call playbook "local/Child - Crowdstrike hunter", returns the playbook_run_id
    playbook_run_id = phantom.playbook("local/Child - Crowdstrike hunter", container=container, inputs=inputs)

    return


@phantom.playbook_block()
def playbook_child___crowdstrike_tenant_id_lookup_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("playbook_child___crowdstrike_tenant_id_lookup_1() called")

    filtered_artifact_0_data_artifact_filter = phantom.collect2(container=container, datapath=["filtered-data:artifact_filter:condition_1:artifact:*.cef.customerIDString"])

    filtered_artifact_0__cef_customeridstring = [item[0] for item in filtered_artifact_0_data_artifact_filter]

    tenant_id_combined_value = phantom.concatenate(filtered_artifact_0__cef_customeridstring, dedup=True)

    inputs = {
        "tenant_id": tenant_id_combined_value,
    }

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    # call playbook "local/Child - Crowdstrike Tenant ID Lookup", returns the playbook_run_id
    playbook_run_id = phantom.playbook("local/Child - Crowdstrike Tenant ID Lookup", container=container, name="playbook_child___crowdstrike_tenant_id_lookup_1", callback=playbook_child___crowdstrike_hunter_1, inputs=inputs)

    return


@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # This function is called after all actions are completed.
    # summary of all the action and/or all details of actions
    # can be collected here.

    # summary_json = phantom.get_summary()
    # if 'result' in summary_json:
        # for action_result in summary_json['result']:
            # if 'action_run_id' in action_result:
                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)
                # phantom.debug(action_results)

    ################################################################################
    ## Custom Code End
    ################################################################################

    return